{
  "name": "Activityrouter",
  "tagline": "Router activities.",
  "body": "# ActivityRouter\r\n\r\n### [English README.md here](https://github.com/mzule/ActivityRouter/blob/master/README-en.md)\r\n\r\n## 功能\r\n\r\n支持给`Activity`定义URL，这样可以通过URL跳转到`Activity`，支持在浏览器以及app中跳入。\r\n\r\n![image](https://raw.githubusercontent.com/mzule/ActivityRouter/master/gif/router.gif)\r\n\r\n![image](https://raw.githubusercontent.com/mzule/ActivityRouter/master/gif/http.gif)\r\n\r\n## 集成\r\n根目录build.gradle\r\n\r\n```\r\nbuildscript {\r\n  dependencies {\r\n    classpath 'com.neenbedankt.gradle.plugins:android-apt:1.7'\r\n  }\r\n}\r\n```\r\n\r\n项目app/build.gradle\r\n```\r\napply plugin: 'android-apt'\r\n\r\ndependencies {\r\n\tcompile 'com.github.mzule.activityrouter:activityrouter:1.1.1'\r\n\tapt 'com.github.mzule.activityrouter:compiler:1.1.1'\r\n}\r\n\r\n```\r\n\r\n在`AndroidManifest.xml`配置\r\n\r\n```\r\n<activity\r\n    android:name=\"com.github.mzule.activityrouter.router.RouterActivity\"\r\n    android:theme=\"@android:style/Theme.NoDisplay\">\r\n    <intent-filter>\r\n        <action android:name=\"android.intent.action.VIEW\" />\r\n        <category android:name=\"android.intent.category.DEFAULT\" />\r\n        <category android:name=\"android.intent.category.BROWSABLE\" />\r\n        <data android:scheme=\"mzule\" /><!--改成自己的scheme-->\r\n    </intent-filter>\r\n</activity>\r\n```\r\n在需要配置的`Activity`上添加注解\r\n\r\n```\r\n@Router(\"main\")\r\npublic class MainActivity extends Activity {\r\n\t...\r\n}\r\n```\r\n这样就可以通过`mzule://main`来打开`MainActivity`了。\r\n\r\n## 进阶\r\n\r\n### 支持配置多个地址\r\n\r\n```\r\n@Router({\"main\", \"root\"})\r\n```\r\n\r\n`mzule://main`和`mzule://root`都可以访问到同一个`Activity`\r\n\r\n\r\n### 支持获取url中`?`传递的参数\r\n\r\n```\r\n@Router(\"main\")\r\n```\r\n上面的配置，可以通过`mzule://main?color=0xff878798&name=you+are+best`来传递参数，在`MainActivity#onCreate`中通过`getIntent().getStringExtra(\"name\")`的方式来获取参数，所有的参数默认为`String`类型，但是可以通过配置指定参数类型，后面会介绍。\r\n\r\n### 支持在path中定义参数\r\n\r\n```\r\n@Router(\"main/:color\")\r\n```\r\n\r\n通过`:color`的方式定义参数，参数名为`color`，访问`mzule://main/0xff878798`，可以在`MainActivity#onCreate`通过`getIntent().getStringExtra(\"color\")`获取到color的值`0xff878798`\r\n\r\n### 支持多级path参数\r\n\r\n```\r\n@Router(\"user/:userId/:topicId/:commentId\")\r\n\r\n@Router(\"user/:userId/topic/:topicId/comment/:commentId\")\r\n```\r\n\r\n上面两种方式都是被支持的，分别定义了三个参数，`userId`,`topicId`,`commentId`\r\n\r\n\r\n### 支持指定参数类型\r\n\r\n```\r\n@Router(value = \"main/:color\", intExtra = \"color\")\r\n```\r\n这样指定了参数`color`的类型为`int`，在`MainActivity#onCreate`获取color可以通过`getIntent().getIntExtra(\"color\", 0)`来获取。支持的参数类型有`int`,`long`,`short`,`byte`,`char`,`float`,`double`,`boolean`，默认不指定则为`String`类型。\r\n\r\n### 支持优先适配\r\n\r\n```\r\n@Router(\"user/:userId\")\r\npublic class UserActivity extends Activity {\r\n\t...\r\n}\r\n\r\n@Router(\"user/statistics\")\r\npublic class UserStatisticsActivity extends Activity {\r\n\t...\r\n}\r\n```\r\n假设有上面两个配置，\r\n\r\n不支持优先适配的情况下，`mzule://user/statistics`可能会适配到`@Router(\"user/:userId\")`，并且`userId=statistics`\r\n\r\n支持优先适配，意味着，`mzule://user/statistics`会直接适配到`@Router(\"user/statistics\")`，不会适配前一个`@Router(\"user/:userId\")`\r\n\r\n### 支持Callback\r\n\r\n```\r\npublic class App extends Application implements RouterCallbackProvider {\r\n    @Override\r\n    public RouterCallback provideRouterCallback() {\r\n        return new SimpleRouterCallback() {\r\n            @Override\r\n            public void beforeOpen(Context context, Uri uri) {\r\n                context.startActivity(new Intent(context, LaunchActivity.class));\r\n            }\r\n\r\n            @Override\r\n            public void afterOpen(Context context, Uri uri) {\r\n            }\r\n\r\n            @Override\r\n            public void notFound(Context context, Uri uri) {\r\n                context.startActivity(new Intent(context, NotFoundActivity.class));\r\n            }\r\n        };\r\n    }\r\n}\r\n```\r\n在`Application`中实现`RouterCallbackProvider`接口，通过`provideRouterCallback()`方法提供`RouterCallback`，具体API如上。\r\n\r\n### 支持Http(s)协议\r\n\r\n```\r\n@Router({\"http://mzule.com/main\", \"main\"})\r\n```\r\n\r\nAndroidManifest.xml\r\n\r\n```\r\n<activity\r\n    android:name=\"com.github.mzule.activityrouter.router.RouterActivity\"\r\n    android:theme=\"@android:style/Theme.NoDisplay\">\r\n    ...\r\n    <intent-filter>\r\n    \t<action android:name=\"android.intent.action.VIEW\" />\r\n    \t<category android:name=\"android.intent.category.DEFAULT\" />\r\n    \t<category android:name=\"android.intent.category.BROWSABLE\" />\r\n    \t<data android:scheme=\"http\" android:host=\"mzule.com\" />\r\n\t</intent-filter>\r\n</activity>\r\n```\r\n\r\n这样，`http://mzule.com/main`和`mzule://main`都可以映射到同一个Activity，值得注意的是，在`@Router`中声明`http`协议地址时，需要写全称。\r\n\r\n### 支持参数transfer\r\n\r\n```\r\n@Router(value = \"item\", longExtra = \"id\", transfer = \"id=>itemId\")\r\n```\r\n这里通过`transfer = \"id=>itemId\"`的方式，设定了url中名称为`id`的参数会被改名成`itemId`放到参数`Bundle`中，类型为`long`. 值得注意的是，这里，通过`longExtra = \"id\"`或者`longExtra = \"itemId\"`都可以设置参数类型为`long`.\r\n\r\n### 支持应用内调用\r\n\r\n```\r\nRouters.open(context, \"mzule://main/0xff878798\")\r\nRouters.open(context, Uri.parse(\"mzule://main/0xff878798\"))\r\n```\r\n\r\n通过`Routers.open(Context, String)`或者`Routers.open(Context, Uri)`可以直接在应用内打开对应的Activity，不去要经过RouterActivity跳转，效率更高。\r\n\r\n## 混淆配置\r\n\r\n```\r\n-keep class com.github.mzule.activityrouter.router.** { *; }\r\n```",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}